<?xml version="1.0" encoding="UTF-8"?>
<!--
    * Copyright (c) 2006 Encore Research Group, University of Toronto
    *
    * This library is free software; you can redistribute it and/or
    * modify it under the terms of the GNU Lesser General Public
    * License as published by the Free Software Foundation; either
    * version 2.1 of the License, or (at your option) any later version.
    *
    * This library is distributed in the hope that it will be useful,
    * but WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    * Lesser General Public License for more details.
    *
    * You should have received a copy of the GNU Lesser General Public
    * License along with this library; if not, write to the Free Software
    * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
-->

<!-- $Id: web.xml 2556 2009-11-06 14:59:50Z henrik@enovate.no $ -->

<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
         version="2.4">


    <display-name>SCY Web application</display-name>


    <!-- Context Params -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>/WEB-INF/classes/log4j.properties</param-value>
    </context-param>

    <context-param>
        <param-name>defaultHtmlEscape</param-name>
        <param-value>true</param-value>
    </context-param>

    <!--context-param>
        <param-name>contextConfigClass</param-name>
        <param-value>${context.config.class}</param-value>
    </context-param-->

    <context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
            classpath:configurations/applicationContexts/scy/acegiSecurity.xml,
            classpath:configurations/applicationContexts/pas/annotation.xml,   
            classpath:configurations/applicationContexts/scy/hibernate.xml,
            classpath:configurations/applicationContexts/pas/datasource.xml,
            classpath:configurations/applicationContexts/pas/security.xml,
            classpath:configurations/applicationContexts/pas/sds.xml,
            classpath:configurations/applicationContexts/scy/user.xml,
            classpath:configurations/applicationContexts/scy/extensions.xml,
            classpath:configurations/dispatcherServlet/scy/config.xml,
            classpath:eu/scy/core/persistence/hibernate/applicationContext-dao.xml,
            classpath:eu/scy/core/applicationContext-service.xml,
            classpath:configurations/dispatcherServlet/scy/external-components.xml,
            classpath:configurations/dispatcherServlet/scy/pedagogical-plan-service.xml,
        </param-value>
	</context-param>


    <!--  Filters -->
    <filter>
        <filter-name>Acegi Filter Chain Proxy</filter-name>
        <filter-class>org.springframework.security.util.FilterToBeanProxy</filter-class>
        <init-param>
            <param-name>targetClass</param-name>
            <param-value>org.springframework.security.util.FilterChainProxy</param-value>
        </init-param>
    </filter>


    <!--  Filter Mappings -->
    <filter-mapping>
        <filter-name>Acegi Filter Chain Proxy</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <listener>
         <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
       </listener>


    <!--  Listeners -->
    <listener>
        <listener-class>
            org.springframework.web.util.Log4jConfigListener
        </listener-class>
    </listener>

    <!--
        The HttpSessionEventPublisher will publish
        HttpSessionCreatedEvent and HttpSessionDestroyedEvent
        to the WebApplicationContext
    -->
    <listener>
        <listener-class>
            org.springframework.security.ui.session.HttpSessionEventPublisher
        </listener-class>
    </listener>


    <!-- Servlets -->
    <!-- Using Spring's web MVC -->
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!--
        - Dispatcher servlet definition for HTTP remoting via Hessian, Burlap, and
        - Spring's HTTP invoker (see remoting-servlet.xml for the controllers).
    -->
    <servlet>
        <servlet-name>remoting</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--init-param>
            <param-name>contextConfigClass</param-name>
            <param-value>${context.config.class}</param-value>
        </init-param-->
        <load-on-startup>1</load-on-startup>
    </servlet>


    <!--

        - Dispatcher servlet mapping for HTTP remoting via Hessian, Burlap, and
        - Spring's HTTP invoker (see remoting-servlet.xml for the controllers).
    -->
    <servlet-mapping>
        <servlet-name>remoting</servlet-name>
        <url-pattern>/remoting/*</url-pattern>
    </servlet-mapping>

    <!-- Servlet Mappings -->
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>


    <!-- List of filenames that are automatically resolved for directory requests -->
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>


    <!--
        Make it distributable for load balancing purposes.
        That means HttpSessions are serialized.
        Objects going into the session better be serializable!
    -->
    <distributable/>

</web-app>
